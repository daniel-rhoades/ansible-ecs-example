#
# Provision AWS ECS with EC2 instances
#

# Cluster: A logical grouping of container instances that you can place tasks on
- name: "ECS | Provision the cluster"
  ecs_cluster:
    name: "{{ ecs_cluster_name }}"
    state: present

# Container Instances: An Amazon EC2 instance that is running the Amazon ECS agent and has been registered into a cluster
- name: "EC2 | Provision an EC2 launch configuration for ECS use"
  ec2_lc:
    name: "{{ ecs_cluster_name }}-lc"
    image_id: "{{ ec2_ami_id }}"
    key_name: "{{ key_name }}"
    security_groups: ["{{ inbound_app_sg }}", "{{ inbound_ssh_sg }}", "{{ outbound_sg }}"]
    instance_type: "{{ ec2_instance_type }}"
    instance_monitoring: true
    instance_profile_name: "ecsInstanceRole"
    assign_public_ip: true
    user_data: |
      #!/bin/bash
      echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config

- name: "EC2 | Provision an EC2 auto scaling group for ECS use"
  ec2_asg:
    name: "{{ ecs_cluster_name }}-asg"
    availability_zones: [ "{{ subnet_ecscluster_az_1 }}", "{{ subnet_ecscluster_az_2 }}" ]
    launch_config_name: "{{ ecs_cluster_name }}-lc"
    min_size: 1
    max_size: 2
    desired_capacity: 2
    vpc_zone_identifier: [ "{{ subnet_ecscluster_1_id }}", "{{ subnet_ecscluster_2_id }}" ]
    tags:
      - component: "{{ ec2_instance_name }}"
        Name: "{{ vpc_name }}_{{ ec2_instance_name }}"
        env: "{{ env }}"
    wait_for_instances: true

# Task Definition: A description of an application that contains one or more container definitions
- name: "ECS | Describe the application as a task definition"
  ecs_taskdefinition:
    containers:
      - name: simple-app
        cpu: 10
        essential: true
        image: "httpd:2.4"
        memory: 300
        mountPoints:
          - containerPath: /usr/local/apache2/htdocs
            sourceVolume: my-vol
        portMappings:
          - containerPort: 80
            hostPort: 80

      - name: busybox
        command:
          - "/bin/sh -c \"while true; do echo '<html> <head> <title>Amazon ECS Sample App</title> <style>body {margin-top: 40px; background-color: #333;} </style> </head><body> <div style=color:white;text-align:center> <h1>Amazon ECS Sample App</h1> <h2>Congratulations!</h2> <p>Your application is now running on a container in Amazon ECS.</p>' > top; /bin/date > date ; echo '</div></body></html>' > bottom; cat top date bottom > /usr/local/apache2/htdocs/index.html ; sleep 1; done\""
        cpu: 10
        entryPoint:
          - sh
          - "-c"
        essential: false
        image: busybox
        memory: 200
        volumesFrom:
          - sourceContainer: simple-app
    volumes:
      - name: my-vol
    family: "{{ ecs_task_definition_family }}"
    state: present
  register: ecs_taskdefinition_output

# Service: An Amazon ECS service allows you to run and maintain a specified number of instances of a task definition simultaneously
- name: "ECS | Provision a service using the previous task definition for a specific number of instances"
  ecs_service:
    state: present
    name: "{{ ecs_service_name }}"
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ ecs_task_definition_family }}:{{ ecs_service_version }}"
    desired_count: "{{ ecs_task_definition_count }}"